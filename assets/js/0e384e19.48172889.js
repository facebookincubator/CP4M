"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[671],{3905:(e,t,n)=>{n.d(t,{Zo:()=>l,kt:()=>h});var r=n(7294);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},o=Object.keys(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var p=r.createContext({}),c=function(e){var t=r.useContext(p),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},l=function(e){var t=c(e.components);return r.createElement(p.Provider,{value:t},e.children)},u="mdxType",m={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},g=r.forwardRef((function(e,t){var n=e.components,a=e.mdxType,o=e.originalType,p=e.parentName,l=s(e,["components","mdxType","originalType","parentName"]),u=c(n),g=a,h=u["".concat(p,".").concat(g)]||u[g]||m[g]||o;return n?r.createElement(h,i(i({ref:t},l),{},{components:n})):r.createElement(h,i({ref:t},l))}));function h(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var o=n.length,i=new Array(o);i[0]=g;var s={};for(var p in t)hasOwnProperty.call(t,p)&&(s[p]=t[p]);s.originalType=e,s[u]="string"==typeof e?e:a,i[1]=s;for(var c=2;c<o;c++)i[c]=n[c];return r.createElement.apply(null,i)}return r.createElement.apply(null,n)}g.displayName="MDXCreateElement"},9881:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>p,contentTitle:()=>i,default:()=>m,frontMatter:()=>o,metadata:()=>s,toc:()=>c});var r=n(7462),a=(n(7294),n(3905));const o={sidebar_position:1},i="Introduction",s={unversionedId:"intro",id:"intro",title:"Introduction",description:"Conversational Platform for Marketing (CP4M) is a middleware service which enables developers to easily integrate their user-facing LLM chatbots with messaging platforms like Whatsapp and Facebook Messenger. CP4M can help scale your chatbot's traffic to billions of people globally in less than an hour of development time.",source:"@site/docs/intro.md",sourceDirName:".",slug:"/intro",permalink:"/CP4M/docs/intro",draft:!1,editUrl:"https://facebookincubator.github.io/CP4M/docs/intro/docs/intro.md",tags:[],version:"current",sidebarPosition:1,frontMatter:{sidebar_position:1},sidebar:"tutorialSidebar",next:{title:"System Architecture",permalink:"/CP4M/docs/system-architecture"}},p={},c=[{value:"Getting Started",id:"getting-started",level:2},{value:"Set up your configuration file",id:"set-up-your-configuration-file",level:3},{value:"Build and Run CP4M via Docker",id:"build-and-run-cp4m-via-docker",level:3}],l={toc:c},u="wrapper";function m(e){let{components:t,...o}=e;return(0,a.kt)(u,(0,r.Z)({},l,o,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"introduction"},"Introduction"),(0,a.kt)("p",null,"Conversational Platform for Marketing (CP4M) is a middleware service which enables developers to easily integrate their user-facing LLM chatbots with messaging platforms like Whatsapp and Facebook Messenger. CP4M can help scale your chatbot's traffic to billions of people globally ",(0,a.kt)("strong",{parentName:"p"},"in less than an hour")," of development time."),(0,a.kt)("p",null,(0,a.kt)("img",{alt:"System Diagram",src:n(3127).Z,width:"3302",height:"2183"})),(0,a.kt)("h2",{id:"getting-started"},"Getting Started"),(0,a.kt)("p",null," Clone the open source project from ",(0,a.kt)("a",{parentName:"p",href:"https://github.com/facebookincubator/CP4M"},"GitHub"),"."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-bash"},"git clone git@github.com:facebookincubator/CP4M.git\n")),(0,a.kt)("h3",{id:"set-up-your-configuration-file"},"Set up your configuration file"),(0,a.kt)("ol",null,(0,a.kt)("li",{parentName:"ol"},"Create an empty file")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-bash"},"mkdir /tmp/cp4m\ntouch /tmp/cp4m/cp4m.toml\n")),(0,a.kt)("ol",{start:2},(0,a.kt)("li",{parentName:"ol"},"Copy the relevant configuration contents into your file")),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"Example: Whatsapp w/ OpenAI")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-bash"},'port = 8080\n\n[[plugins]]\nname = "openai_test"\ntype = "openai"\nmodel = "gpt-3.5-turbo"\napi_key = "<your api key here>"\n\n[[stores]]\nname = "memory_test"\ntype = "memory"\nstorage_duration_hours = 1\nstorage_capacity_mbs = 1\n\n[[handlers]]\ntype = "whatsapp"\nname = "whatsapp_test"\nverify_token = "<your verification token here>"\napp_secret = "<your verification app secret here>"\naccess_token = "<you access token here>"\n\n[[services]]\nwebhook_path = "/<your webhook pathname here>"\nplugin = "openai_test"\nstore = "memory_test"\nhandler = "whatsapp_test"\n')),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"Example: Messenger & Whatsapp w/ Llama 2 (via Hugging Face)")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-bash"},'port = 8080\n\n[[plugins]]\nname = "hf_test"\ntype = "hugging_face"\nendpoint = "<your hugging face api url here>"\ntoken_limit = 1000\napi_key = "<your hugging face api key here>"\n\n[[stores]]\nname = "memory_test"\ntype = "memory"\nstorage_duration_hours = 1\nstorage_capacity_mbs = 1\n\n[[handlers]]\nname = "messenger_test"\ntype = "messenger"\nverify_token = "<your messenger verification token here>"\napp_secret = "<your messenger verification app secret here>"\npage_access_token = "<your messenger page access token here>"\n\n[[handlers]]\nname = "whatsapp_test"\ntype = "whatsapp"\nverify_token = "<your verification token here>"\napp_secret = "<your verification app secret here>"\naccess_token = "<you access token here>"\n\n[[services]]\nwebhook_path = "/<your webhook pathname here>"\nplugin = "hf_test"\nstore = "memory_test"\nhandler = "messenger_test"\n\n[[services]]\nwebhook_path = "/<your webhook pathname here>"\nplugin = "hf_test"\nstore = "memory_test"\nhandler = "whatsapp_test"\n')),(0,a.kt)("p",null,"For help finding tokens & secrets for your app in the handlers section, please go to the relevant messaging page in ",(0,a.kt)("a",{parentName:"p",href:"./category/messaging-integrations"},"Messaging Integrations"),". For help finding the api_key for your LLM plugin, please go to the relevant LLM page in ",(0,a.kt)("a",{parentName:"p",href:"./category/llm-connections"},"LLM Connections"),"."),(0,a.kt)("p",null,"If there is another LLM plugin not listed above that you would like to use, please contact ",(0,a.kt)("a",{parentName:"p",href:"mailto:cp4m@meta.com"},"cp4m@meta.com"),"."),(0,a.kt)("h3",{id:"build-and-run-cp4m-via-docker"},"Build and Run CP4M via Docker"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-bash"},"docker build -t cp4m .\ndocker run -v /tmp/cp4m:/tmp/cp4m -e CP4M_CONFIGURATION_FILE=/tmp/cp4m/cp4m.toml -p 8080:8080 cp4m\n")))}m.isMDXComponent=!0},3127:(e,t,n)=>{n.d(t,{Z:()=>r});const r=n.p+"assets/images/cp4m_diagram-5ee6b699091504f204d9a07d05fb84ba.png"}}]);